1.通过判别屏幕的长宽来显示来调用相应的activity布局，
就可以实现手机和平板双适应。同时为了完成平板下列表与详细界面，
使用fragment容器就可以完成一个屏幕内显示两个activity布局。

2.因为网络服务延时较长，
影响用户体验且Android Studio已不允许在主线程中访问网络，
所以获取网络数据，必须开辟一个新的线程。
由于需求的JSON数据量不大
，采用最原始的JSON数据解析方法，
通过JSONobject对象，来解析。

3.对于SQLite使用，根据实验前分析要建立一张天气表，
来存放天气的状况，建立一张城市表，来存放当前的城市名。
基本逻辑如下：
首先获取城市表中最新的城市名，
新建线程并利用这个城市名获取JSON数据，
解析JSON数据并存入数据库天气表中。
UI显示数据时，直接访问数据库，获取数据并显示。

4.添加菜单时，需要在activity中添加，不能在fragment中添加。

5.对于地图的定位，可以通过高德地图的API来定位，
导入jar包，建立地图管理类，使用地图容器，
重写各个生命周期。定位成功后，
将定位到的城市名存入数据库，否则提示定位失败。

6.在使用后台服务时，首先访问网络，
获取新的天气数据存入数据库。再打开数据库，
通知用户。最后通过延时服务来调用这个后台服务，
保证销毁这个APP后，依然可以实现后台通知。

7.fragment与activity通信，可以通过回调函数实现，
fragment与fragment之间的通信可以通过广播通信实现。

8.在设计UI界面时，严格参照实验指导书，访问数据库，
获取数据并显示数据，最后建立线程实现加载网络图片。
